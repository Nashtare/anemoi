//! Implementation of the Anemoi permutation

use super::{sbox, Felt, MontFp};
use crate::{Anemoi, Jive, Sponge};
use ark_ff::{One, Zero};

/// Digest for Anemoi
mod digest;
/// Sponge for Anemoi
mod hasher;
/// Round constants for Anemoi
mod round_constants;

pub use digest::AnemoiDigest;

// ANEMOI CONSTANTS
// ================================================================================================

/// Function state is set to 2 field elements or 96 bytes.
/// 1 element of the state is reserved for capacity.
pub const STATE_WIDTH: usize = 2;
/// 1 element of the state is reserved for rate.
pub const RATE_WIDTH: usize = 1;

/// The state is divided into two even-length rows.
pub const NUM_COLUMNS: usize = 1;

/// One element (48-bytes) is returned as digest.
pub const DIGEST_SIZE: usize = RATE_WIDTH;

/// The number of rounds is set to 21 to provide 128-bit security level.
pub const NUM_HASH_ROUNDS: usize = 21;

// ANEMOI INSTANTIATION
// ================================================================================================

/// An Anemoi instantiation over BLS12_377 basefield with 1 column and rate 1.
#[derive(Debug, Clone)]
pub struct AnemoiBls12_377_2_1;

impl<'a> Anemoi<'a, Felt> for AnemoiBls12_377_2_1 {
    const NUM_COLUMNS: usize = NUM_COLUMNS;
    const NUM_ROUNDS: usize = NUM_HASH_ROUNDS;

    const WIDTH: usize = STATE_WIDTH;
    const RATE: usize = RATE_WIDTH;
    const OUTPUT_SIZE: usize = DIGEST_SIZE;

    const ARK_C: &'a [Felt] = &round_constants::C;
    const ARK_D: &'a [Felt] = &round_constants::D;

    const GROUP_GENERATOR: u32 = sbox::BETA;

    const ALPHA: u32 = sbox::ALPHA;
    const INV_ALPHA: Felt = sbox::INV_ALPHA;
    const BETA: u32 = sbox::BETA;
    const DELTA: Felt = sbox::DELTA;

    fn exp_by_inv_alpha(x: Felt) -> Felt {
        sbox::exp_by_inv_alpha(&x)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sbox() {
        // Generated from https://github.com/anemoi-hash/anemoi-hash/
        let mut input = [
            [Felt::zero(), Felt::zero()],
            [Felt::one(), Felt::one()],
            [Felt::zero(), Felt::one()],
            [Felt::one(), Felt::zero()],
            [MontFp!("55325355831127758935828770792108677057430586389825920293825522789299413796813868661816003578608629157611288546680"
                ),
                MontFp!("230418131459738392338091495295880689020475464535844567908436978176114679821537074998570155472263588845071539024185"),],[MontFp!("71325185616091832943661739659571599886494119436752692265522392427642308827966306572333539281433732390290283580170"
                ),
                MontFp!("247622887449090056521903249932798523993754951613575728974226070080732936482664975696483371526871926341973774209774"),],[MontFp!("153693252530394457294699322985503562187849366886880186032857129706026602203767435709015534761779895768213366946908"
                ),
                MontFp!("221269276657729634693350744315262131829998560856933016068330175872267519358323168967089414116668981310823461105119"),],[MontFp!("2481626258099915459079578673318875710982057421341995323955898563534812974651106893731515672733617070403363733642"
                ),
                MontFp!("75598620114933707127426571665099223179612706432097675547088204714720992109918394660088221877412775968370385454844"),],[MontFp!("126587583957617252135208772803996007268155381967392367848096093983881043895796463583449496638744527519243960743033"
                ),
                MontFp!("215828305933318219253375442073626718206437427733179364543131269888445217124929878783869867436718699471462301669914"),],[MontFp!("223303351705032231205668936560464331610650757127300052900882754799474282404318153868165753431943041727218331505243"
                ),
                MontFp!("122868786461039344105770504514589795272206805119199392066762727102160238345260078066588721489687282191956177965416"),],];

        let output = [
[MontFp!("34488590135062545868087031159319137804852468367321954738651235022229395779778776369995851751943114683258709527757"),Felt::zero(),],[MontFp!("22421587733773004428941416064670070049380684225745603942931744991828811999604202704747517426704305501497113204495"
                ),
                MontFp!("35100315566570170733149551489349276622307135424268575122052037927847002802325620032793599804427260707856609187629"),],[MontFp!("202558602263566318131643800652419726645194525740297977929133933131347972453654409557175672915498236741806441721312"
                ),
                MontFp!("61175793463368953076827834167708903085151301277604448500868993247542667587861806962357930104272623662398813530876"),],[MontFp!("34488590135062545868087031159319137804852468367321954738651235022229395779778776369995851751943114683258709527773"
                ),
                MontFp!("258664426012969094010652733694893533536393512754914660539884262666720468348340822774968888139573360124440321458176"),],[MontFp!("255697429891309890329480139016896676655506708054315380468168848779219961873576596473143570315333554379584158891445"
                ),
                MontFp!("57523061064790092734312416602889885061134093736638531395609143112179192751189072218904253038719345658885315290403"),],[MontFp!("37246205209652182853485108004230185459068741153031242139202383223562658803937103037700253128369333741369631109236"
                ),
                MontFp!("91110696630962496154531617494852991743229430998493633330335085758400942399983349407397612814881954598061353233333"),],[MontFp!("187216921564673947618122867003594842796902172308248392398036368272456546285581588660925290249104720246252969343473"
                ),
                MontFp!("130868344124505704817669759814395869396104166968302138447253176282536726428287143944081576326125427242747627626371"),],[MontFp!("98869511617284304002991474564588533367379767999364773977409704447106700497093997242468821365463044539728276724247"
                ),
                MontFp!("171215836110027344780934021078554428940875678963704698324166785186394466950297804554134670290053802061168068177364"),],[MontFp!("147581296427029334345185494441147069449894300152623008144015428729730177198978674601127317529492127644101107164014"
                ),
                MontFp!("186701470961903801034271292254072510624292185081958569465780786455611762162599910008574359772581428844421663818907"),],[MontFp!("158317866510331240311911314226750973232026534532469903189457782292068193934336646378458274125046878978294160033698"
                ),
                MontFp!("174494072776911083726624061902098878797049271941972911044007697630498600165733519897828824104550948028425339779488"),],];

        for i in input.iter_mut() {
            AnemoiBls12_377_2_1::sbox_layer(i);
        }

        for (&i, o) in input.iter().zip(output) {
            assert_eq!(i, o);
        }
    }
}
